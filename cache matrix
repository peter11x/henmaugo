

## This is an assignment to create and manipulate cache of a matrix.
## It is two functions:
## 1. makeCacheMatrix - A function to create a special "matrix" object and 
##                      cache its inverse
## 2. cacheSolve -  A function which return an inverse of the 'matrix' object
##                  if it already exist in the cache and the object remain 
##                  unchanged. Else, the function will calculate the inverse
##                  on the special 'matrix' returned by makeCacheMatrix.

## A function that received a special "matrix" object and cache the inverse
## of the matrix and store in the global environment
## It does nothing except set and get the matrix and its inverse

makeCacheMatrix <- function(x = matrix()) {
  ##initialize the inverse matrix
  invMatrix <- NULL
  
  #define the set function for the matrix
  set <- function(y) {
    x <<- y
    invMatrix <<- NULL
  }
  
  ##define the return matrix object by defining it as get
  get <- function() {
    x ##return special matrix
  }
  
  ##setting the inverse matrix 
  setInvMatrix <- function(invM){
    invMatrix <<- invM ##assign the inverse matrix to the environment var
  } 
  
  ##define the function for returning the inverse matrix
  getInvMatrix <- function(){
    invMatrix ##the environment var inverse matrix is return
  }
  
  ##put all defined function into a list for future call within the environment
  list(set = set,
       get = get,
       setInvMatrix = setInvMatrix,
       getInvMatrix = getInvMatrix)
}


## A function that will do:
## 1. Check if the inverse object exist and the matrix is unchanged by getting
##    the stored inverse matrix calling from makeCacheMatrix
## 2. Return the inverse object in cache if it satisfy the first rules.
## 3. Else, compute the inverse of the special 'matrix', store in 
##    makeCacheMatrix for future use and return the new inverse object.

cacheSolve <- function(x, ...) {
  ## 1. - get the available inverse of the original matrix generated by makeCacheMatrix
  invM <- x$getInvMatrix()
  
  ## 2. Verified if the inverse has already been calculated
  if (!is.null(invM)){
    ## check if the return invMatrix is identical
    if ( identical( x$get() %*% invM, invM %*% x$get() ) ){
      ## get it from the cache and skips the computation. 
      print("getting cached data")
      return(invM)
    }
  }
  
  ## 3. Else inverse matrix null or matrix change, calculates the inverse 
  data <- x$get()
  invM <- solve(data, ...)
  
  # sets the value of the inverse in the cache via the setinv function.
  x$setInvMatrix(invM)
  
  ## Return a matrix that is the inverse of 'x'
  print("getting new computated data")
  return(invM)
}



